{"ast":null,"code":"import _regeneratorRuntime from \"/Users/cole.sluggett/Documents/git/Review-Me/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/cole.sluggett/Documents/git/Review-Me/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/Users/cole.sluggett/Documents/git/Review-Me/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/cole.sluggett/Documents/git/Review-Me/ui/src/SignUp.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n          {\\n            User{ \\n              username\\n              firstName\\n            }\\n          }\\n        \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CreateUser($input: UserInput!) {\\n    createUser(input: $input) {\\n      id\\n      username\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, Component } from 'react';\nimport { Col, Row, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport { Mutation, renderToStringWithData } from 'react-apollo';\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./SignUp.css\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport client from './index';\nvar CREATE_USER = gql(_templateObject());\nvar GET_USER = gql(_templateObject2());\n\nvar SignUp = function SignUp(_ref) {\n  var post = _ref.post,\n      onClose = _ref.onClose;\n  return React.createElement(FinalForm, {\n    onSubmit:\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref2) {\n        var id, username, location, phone, email, password, input;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                id = _ref2.id, username = _ref2.username, location = _ref2.location, phone = _ref2.phone, email = _ref2.email, password = _ref2.password;\n                input = {\n                  id: id,\n                  username: username,\n                  location: location,\n                  phone: phone,\n                  email: email,\n                  password: password\n                };\n                _context.next = 4;\n                return client.mutate({\n                  variables: {\n                    input: input\n                  },\n                  mutation: CREATE_USER,\n                  refetchQueries: function refetchQueries() {\n                    return [{\n                      query: GET_USER\n                    }];\n                  }\n                });\n\n              case 4:\n                onClose();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    initialValues: post,\n    render: function render(_ref4) {\n      var handleSubmit = _ref4.handleSubmit,\n          pristine = _ref4.pristine,\n          invalid = _ref4.invalid;\n      return React.createElement(Modal, {\n        isOpen: true,\n        toggle: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: alert(\"fuck\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"New User\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Username\"), React.createElement(Field, {\n        required: true,\n        name: \"username\",\n        className: \"form-control\",\n        component: \"input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Location\"), React.createElement(Field, {\n        required: true,\n        name: \"location\",\n        className: \"form-control\",\n        component: \"input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Phone\"), React.createElement(Field, {\n        required: true,\n        name: \"phone\",\n        className: \"form-control\",\n        component: \"input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Email\"), React.createElement(Field, {\n        required: true,\n        name: \"email\",\n        className: \"form-control\",\n        component: \"input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Password\"), React.createElement(Field, {\n        required: true,\n        name: \"password\",\n        className: \"form-control\",\n        component: \"input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }))), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: pristine,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Save\"), React.createElement(Button, {\n        color: \"secondary\",\n        onClick: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Cancel\"))));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  });\n};\n\nexport default SignUp; // const CREATE_USER = gql`\n//   mutation CreateUser\n//     (\n//         $id: ID!, \n//         $username: String!, \n//         $firstName: String, \n//         $lastName: String, \n//         $age: Int, \n//         $bio: String, \n//         $sex: String, \n//         $location: String!, \n//         $phone: String!, \n//         $email: String!,\n//         $password: String!) \n//             {CreateUser\n//                 (\n//                     id: $id, \n//                     username: $username, \n//                     firstName: $firstName, \n//                     lastName: $lastName, \n//                     sex: $sex, \n//                     age: $age, \n//                     bio: $bio, \n//                     location: $location, \n//                     phone: $phone, \n//                     email: $email,\n//                     password: $password) {\n//       id\n//       username\n//     }\n//   }\n// `;\n// export const SignUp = () => {\n//     let input;\n//     const [todoInput, setTodoInput] = useState('');\n//     const updateCache = (cache, { data }) => {\n//         // Fetch the todos from the cache\n//         const existingTodos = cache.readQuery({\n//             query: GET_USER\n//         });\n//         // Add the new todo to the cache\n//         const newTodo = data.insert_todos.returning[0];\n//         cache.writeQuery({\n//             query: GET_USER,\n//             data: { todos: [newTodo, ...existingTodos.todos] }\n//         });\n//     };\n//     const [addTodo] = useMutation(CREATE_USER);\n//     return (\n//         <form className=\"formInput\" onSubmit={(e) => {\n//             e.preventDefault();\n//             addTodo({ variables: { todo: todoInput } });\n//         }}>\n//             <input\n//                 className=\"input\"\n//                 placeholder=\"What needs to be done?\"\n//                 value={todoInput}\n//                 onChange={e => (setTodoInput(e.target.value))}\n//                 ref={n => (input = n)}\n//             />\n//             <i className=\"inputMarker fa fa-angle-right\" />\n//         </form>\n//     );\n// };\n// export class SignUp extends Component {\n//     constructor(props){\n//         super(props)\n//         this.state = {\n//             id: '',\n//             username: '',\n//             firstName: '',\n//             lastName: '',\n//             age: 0,\n//             bio: '',\n//             sex: '',\n//             location: '',\n//             phone: '',\n//             email: '',\n//             password: '',\n//         };\n//         this.createUser.bind(this);\n//     }\n//     createUser(){\n//         return null;\n//     }\n//     render() {\n//         const {\n//             id,\n//             username,\n//             firstName,\n//             lastName,\n//             age,\n//             bio,\n//             sex,\n//             location,\n//             phone,\n//             email,\n//             password\n//         } = this.state\n//         return (\n//             <Form className=\"mr-auto ml-auto test\">\n//                 <Row>\n//                     <Col md={8}>\n//                         <FormGroup>\n//                             <Label for=\"Email\">Email</Label>\n//                             <Input\n//                                 type=\"email\"\n//                                 name=\"email\"\n//                                 id=\"exampleEmail\"\n//                                 placeholder=\"Enter your Email here!\"\n//                                 value={email}\n//                                 onChange={e => this.setState({ email: e.target.value })}\n//                             />\n//                         </FormGroup>\n//                     </Col>\n//                     <Col md={4}>\n//                         <FormGroup>\n//                             <Label for=\"Age\">Age</Label>\n//                             <Input\n//                                 type=\"number\"\n//                                 name=\"age\"\n//                                 id=\"age\"\n//                                 placeholder=\"How old are you?\"\n//                                 max=\"110\"\n//                                 min=\"8\"\n//                                 value={age}\n//                                 onChange={e => this.setState({ age: e.target.value })}\n//                             />\n//                         </FormGroup>\n//                     </Col>\n//                 </Row>\n//                 <Row>\n//                     <Col md={8}>\n//                         <FormGroup>\n//                             <Label for=\"firstName\">firstName</Label>\n//                             <Input\n//                                 name=\"firstName\"\n//                                 id=\"firstName\"\n//                                 placeholder=\"Enter your firstName here!\"\n//                                 value={firstName}\n//                                 onChange={e => this.setState({ firstName: e.target.value })}\n//                             />\n//                         </FormGroup>\n//                     </Col>\n//                     <Col md={4}>\n//                         <FormGroup>\n//                             <Label for=\"lastName\">lastName</Label>\n//                             <Input\n//                                 name=\"lastName\"\n//                                 id=\"lastName\"\n//                                 placeholder=\"Enter your lastName here!\"\n//                                 value={lastName}\n//                                 onChange={e => this.setState({ lastName: e.target.value })}\n//                             />\n//                         </FormGroup>\n//                     </Col>\n//                 </Row>\n//                 <FormGroup>\n//                     <Label for=\"Username\">Username</Label>\n//                     <Input\n//                         name=\"username\"\n//                         id=\"username\"\n//                         placeholder=\"Come up with something unique!\"\n//                         value={username}\n//                         onChange={e => this.setState({ username: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"id\">id</Label>\n//                     <Input\n//                         name=\"id\"\n//                         id=\"id\"\n//                         placeholder=\"Come up with something unique!\"\n//                         value={id}\n//                         onChange={e => this.setState({ id: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"Password\">Password</Label>\n//                     <Input\n//                         type=\"password\"\n//                         name=\"password\"\n//                         id=\"Password\"\n//                         placeholder=\"Create your new password here!\"\n//                         value={password}\n//                         onChange={e => this.setState({ password: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"Sex\">Select Sex</Label>\n//                     <Input\n//                         type=\"select\"\n//                         name=\"Sex\"\n//                         id=\"SexSelect\"\n//                         value={sex}\n//                         onChange={e => this.setState({ sex: e.target.value })} >\n//                         <option>Female</option>\n//                         <option>Male</option>\n//                     </Input>\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"Location\">Location</Label>\n//                     <Input\n//                         name=\"location\"\n//                         id=\"location\"\n//                         placeholder=\"Come up with something unique!\"\n//                         value={location}\n//                         onChange={e => this.setState({ location: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"Phone\">Phone</Label>\n//                     <Input\n//                         name=\"phone\"\n//                         id=\"phone\"\n//                         placeholder=\"Come up with something unique!\"\n//                         value={phone}\n//                         onChange={e => this.setState({ phone: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"exampleText\">Tell everyone about you! Bio:</Label>\n//                     <Input\n//                         type=\"textarea\"\n//                         name=\"text\"\n//                         id=\"exampleText\"\n//                         value={bio}\n//                         onChange={e => this.setState({ bio: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <Mutation mutation={CREATE_USER} variables={{\n//                     id,\n//                     username,\n//                     firstName,\n//                     lastName,\n//                     age,\n//                     bio,\n//                     sex,\n//                     location,\n//                     phone,\n//                     email,\n//                     password }}>\n//                     {<button onClick={createUser}>Submit</button>}\n//                 </Mutation>\n//             </Form>\n//         );\n//     }\n// }","map":{"version":3,"sources":["/Users/cole.sluggett/Documents/git/Review-Me/ui/src/SignUp.js"],"names":["React","useState","Component","Col","Row","Button","Form","FormGroup","Label","Input","FormText","Mutation","renderToStringWithData","useMutation","gql","Modal","ModalHeader","ModalBody","ModalFooter","FinalForm","Field","client","CREATE_USER","GET_USER","SignUp","post","onClose","id","username","location","phone","email","password","input","mutate","variables","mutation","refetchQueries","query","handleSubmit","pristine","invalid","alert"],"mappings":"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":["import React, { useState, Component } from 'react';\n\nimport { Col, Row, Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport { Mutation, renderToStringWithData } from 'react-apollo';\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./SignUp.css\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from 'reactstrap';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport client from './index';\n\n\nconst CREATE_USER = gql`\n  mutation CreateUser($input: UserInput!) {\n    createUser(input: $input) {\n      id\n      username\n    }\n  }\n`;\n\nconst GET_USER = gql`\n          {\n            User{ \n              username\n              firstName\n            }\n          }\n        `;\n\n\nconst SignUp = ({ post, onClose }) => (\n  <FinalForm\n    onSubmit={async({\n      id,\n      username,\n      location,\n      phone,\n      email,\n      password }) => {\n      const input = {\n        id,\n        username,\n        location,\n        phone,\n        email,\n        password };\n\n      await client.mutate({\n        variables: { input },\n        mutation: CREATE_USER,\n        refetchQueries: () => [{ query: GET_USER }],\n      });\n      onClose();\n    }}\n    initialValues={post}\n    render={({ handleSubmit, pristine, invalid }) => (\n      <Modal isOpen toggle={onClose}>\n        <Form onSubmit={alert(\"fuck\")}>\n          <ModalHeader toggle={onClose}>\n          New User\n          </ModalHeader>\n          <ModalBody>\n            <FormGroup>\n              <Label>Username</Label>\n              <Field\n                required\n                name=\"username\"\n                className=\"form-control\"\n                component=\"input\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label>Location</Label>\n              <Field\n                required\n                name=\"location\"\n                className=\"form-control\"\n                component=\"input\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label>Phone</Label>\n              <Field\n                required\n                name=\"phone\"\n                className=\"form-control\"\n                component=\"input\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label>Email</Label>\n              <Field\n                required\n                name=\"email\"\n                className=\"form-control\"\n                component=\"input\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label>Password</Label>\n              <Field\n                required\n                name=\"password\"\n                className=\"form-control\"\n                component=\"input\"\n              />\n            </FormGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button type=\"submit\" disabled={pristine} color=\"primary\">Save</Button>\n            <Button color=\"secondary\" onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </Form>\n      </Modal>\n    )}\n  />\n);\n\nexport default SignUp;\n\n\n\n\n// const CREATE_USER = gql`\n//   mutation CreateUser\n//     (\n//         $id: ID!, \n//         $username: String!, \n//         $firstName: String, \n//         $lastName: String, \n//         $age: Int, \n//         $bio: String, \n//         $sex: String, \n//         $location: String!, \n//         $phone: String!, \n//         $email: String!,\n//         $password: String!) \n//             {CreateUser\n//                 (\n//                     id: $id, \n//                     username: $username, \n//                     firstName: $firstName, \n//                     lastName: $lastName, \n//                     sex: $sex, \n//                     age: $age, \n//                     bio: $bio, \n//                     location: $location, \n//                     phone: $phone, \n//                     email: $email,\n//                     password: $password) {\n//       id\n//       username\n//     }\n//   }\n// `;\n\n// export const SignUp = () => {\n//     let input;\n//     const [todoInput, setTodoInput] = useState('');\n\n//     const updateCache = (cache, { data }) => {\n//         // Fetch the todos from the cache\n//         const existingTodos = cache.readQuery({\n//             query: GET_USER\n//         });\n//         // Add the new todo to the cache\n//         const newTodo = data.insert_todos.returning[0];\n//         cache.writeQuery({\n//             query: GET_USER,\n//             data: { todos: [newTodo, ...existingTodos.todos] }\n//         });\n//     };\n\n//     const [addTodo] = useMutation(CREATE_USER);\n\n//     return (\n//         <form className=\"formInput\" onSubmit={(e) => {\n//             e.preventDefault();\n//             addTodo({ variables: { todo: todoInput } });\n//         }}>\n//             <input\n//                 className=\"input\"\n//                 placeholder=\"What needs to be done?\"\n//                 value={todoInput}\n//                 onChange={e => (setTodoInput(e.target.value))}\n//                 ref={n => (input = n)}\n//             />\n//             <i className=\"inputMarker fa fa-angle-right\" />\n//         </form>\n//     );\n// };\n\n\n// export class SignUp extends Component {\n//     constructor(props){\n//         super(props)\n//         this.state = {\n//             id: '',\n//             username: '',\n//             firstName: '',\n//             lastName: '',\n//             age: 0,\n//             bio: '',\n//             sex: '',\n//             location: '',\n//             phone: '',\n//             email: '',\n//             password: '',\n//         };\n//         this.createUser.bind(this);\n//     }\n    \n\n//     createUser(){\n//         return null;\n//     }\n\n\n//     render() {\n//         const {\n//             id,\n//             username,\n//             firstName,\n//             lastName,\n//             age,\n//             bio,\n//             sex,\n//             location,\n//             phone,\n//             email,\n//             password\n//         } = this.state\n\n//         return (\n//             <Form className=\"mr-auto ml-auto test\">\n//                 <Row>\n//                     <Col md={8}>\n//                         <FormGroup>\n//                             <Label for=\"Email\">Email</Label>\n//                             <Input\n//                                 type=\"email\"\n//                                 name=\"email\"\n//                                 id=\"exampleEmail\"\n//                                 placeholder=\"Enter your Email here!\"\n//                                 value={email}\n//                                 onChange={e => this.setState({ email: e.target.value })}\n//                             />\n//                         </FormGroup>\n//                     </Col>\n//                     <Col md={4}>\n//                         <FormGroup>\n//                             <Label for=\"Age\">Age</Label>\n//                             <Input\n//                                 type=\"number\"\n//                                 name=\"age\"\n//                                 id=\"age\"\n//                                 placeholder=\"How old are you?\"\n//                                 max=\"110\"\n//                                 min=\"8\"\n//                                 value={age}\n//                                 onChange={e => this.setState({ age: e.target.value })}\n//                             />\n//                         </FormGroup>\n//                     </Col>\n//                 </Row>\n//                 <Row>\n//                     <Col md={8}>\n//                         <FormGroup>\n//                             <Label for=\"firstName\">firstName</Label>\n//                             <Input\n//                                 name=\"firstName\"\n//                                 id=\"firstName\"\n//                                 placeholder=\"Enter your firstName here!\"\n//                                 value={firstName}\n//                                 onChange={e => this.setState({ firstName: e.target.value })}\n//                             />\n//                         </FormGroup>\n//                     </Col>\n//                     <Col md={4}>\n//                         <FormGroup>\n//                             <Label for=\"lastName\">lastName</Label>\n//                             <Input\n//                                 name=\"lastName\"\n//                                 id=\"lastName\"\n//                                 placeholder=\"Enter your lastName here!\"\n//                                 value={lastName}\n//                                 onChange={e => this.setState({ lastName: e.target.value })}\n//                             />\n//                         </FormGroup>\n//                     </Col>\n//                 </Row>\n//                 <FormGroup>\n//                     <Label for=\"Username\">Username</Label>\n//                     <Input\n//                         name=\"username\"\n//                         id=\"username\"\n//                         placeholder=\"Come up with something unique!\"\n//                         value={username}\n//                         onChange={e => this.setState({ username: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"id\">id</Label>\n//                     <Input\n//                         name=\"id\"\n//                         id=\"id\"\n//                         placeholder=\"Come up with something unique!\"\n//                         value={id}\n//                         onChange={e => this.setState({ id: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"Password\">Password</Label>\n//                     <Input\n//                         type=\"password\"\n//                         name=\"password\"\n//                         id=\"Password\"\n//                         placeholder=\"Create your new password here!\"\n//                         value={password}\n//                         onChange={e => this.setState({ password: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"Sex\">Select Sex</Label>\n//                     <Input\n//                         type=\"select\"\n//                         name=\"Sex\"\n//                         id=\"SexSelect\"\n//                         value={sex}\n//                         onChange={e => this.setState({ sex: e.target.value })} >\n//                         <option>Female</option>\n//                         <option>Male</option>\n//                     </Input>\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"Location\">Location</Label>\n//                     <Input\n//                         name=\"location\"\n//                         id=\"location\"\n//                         placeholder=\"Come up with something unique!\"\n//                         value={location}\n//                         onChange={e => this.setState({ location: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"Phone\">Phone</Label>\n//                     <Input\n//                         name=\"phone\"\n//                         id=\"phone\"\n//                         placeholder=\"Come up with something unique!\"\n//                         value={phone}\n//                         onChange={e => this.setState({ phone: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <FormGroup>\n//                     <Label for=\"exampleText\">Tell everyone about you! Bio:</Label>\n//                     <Input\n//                         type=\"textarea\"\n//                         name=\"text\"\n//                         id=\"exampleText\"\n//                         value={bio}\n//                         onChange={e => this.setState({ bio: e.target.value })}\n//                     />\n//                 </FormGroup>\n//                 <Mutation mutation={CREATE_USER} variables={{\n//                     id,\n//                     username,\n//                     firstName,\n//                     lastName,\n//                     age,\n//                     bio,\n//                     sex,\n//                     location,\n//                     phone,\n//                     email,\n//                     password }}>\n//                     {<button onClick={createUser}>Submit</button>}\n//                 </Mutation>\n//             </Form>\n//         );\n//     }\n// }"]},"metadata":{},"sourceType":"module"}