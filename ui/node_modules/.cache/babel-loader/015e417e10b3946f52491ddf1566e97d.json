{"ast":null,"code":"import { createElement, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { fieldSubscriptionItems, configOptions, createForm, formSubscriptionItems, version } from 'final-form'; //      \n\nfunction diffSubscription(a, b, keys) {\n  if (a) {\n    if (b) {\n      // $FlowFixMe\n      return keys.some(function (key) {\n        return a[key] !== b[key];\n      });\n    } else {\n      return true;\n    }\n  } else {\n    return !!b;\n  }\n}\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}; //      \n// shared logic between components that use either render prop,\n// children render function, or component prop\n\n\nfunction renderComponent(props, name) {\n  var render = props.render,\n      children = props.children,\n      component = props.component,\n      rest = objectWithoutProperties(props, ['render', 'children', 'component']);\n\n  if (component) {\n    return createElement(component, _extends({}, rest, {\n      children: children,\n      render: render\n    }));\n  }\n\n  if (render) {\n    return render(_extends({}, rest, {\n      children: children\n    })); // inject children back in\n  }\n\n  if (typeof children !== 'function') {\n    // istanbul ignore next\n    if (process.env.NODE_ENV !== 'production') {\n      console.error('Warning: Must specify either a render prop, a render function as children, or a component prop to ' + name);\n    }\n\n    return null; // warning will alert developer to their mistake\n  }\n\n  return children(rest);\n} //      \n\n\nvar isReactNative = typeof window !== 'undefined' && window.navigator && window.navigator.product && window.navigator.product === 'ReactNative'; //      \n\nvar getSelectedValues = function getSelectedValues(options) {\n  var result = [];\n\n  if (options) {\n    for (var index = 0; index < options.length; index++) {\n      var option = options[index];\n\n      if (option.selected) {\n        result.push(option.value);\n      }\n    }\n  }\n\n  return result;\n};\n\nvar getValue = function getValue(event, currentValue, valueProp, isReactNative) {\n  if (!isReactNative && event.nativeEvent && event.nativeEvent.text !== undefined) {\n    return event.nativeEvent.text;\n  }\n\n  if (isReactNative && event.nativeEvent) {\n    return event.nativeEvent.text;\n  }\n\n  var detypedEvent = event;\n  var _detypedEvent$target = detypedEvent.target,\n      type = _detypedEvent$target.type,\n      value = _detypedEvent$target.value,\n      checked = _detypedEvent$target.checked;\n\n  switch (type) {\n    case 'checkbox':\n      if (valueProp !== undefined) {\n        // we are maintaining an array, not just a boolean\n        if (checked) {\n          // add value to current array value\n          return Array.isArray(currentValue) ? currentValue.concat(valueProp) : [valueProp];\n        } else {\n          // remove value from current array value\n          if (!Array.isArray(currentValue)) {\n            return currentValue;\n          }\n\n          var index = currentValue.indexOf(valueProp);\n\n          if (index < 0) {\n            return currentValue;\n          } else {\n            return currentValue.slice(0, index).concat(currentValue.slice(index + 1));\n          }\n        }\n      } else {\n        // it's just a boolean\n        return !!checked;\n      }\n\n    case 'select-multiple':\n      return getSelectedValues(event.target.options);\n\n    default:\n      return value;\n  }\n}; //      \n\n\nvar all = fieldSubscriptionItems.reduce(function (result, key) {\n  result[key] = true;\n  return result;\n}, {});\n\nvar Field = function (_React$Component) {\n  inherits(Field, _React$Component);\n\n  function Field(props, context) {\n    classCallCheck(this, Field);\n\n    var _this = possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _initialiseProps.call(_this);\n\n    var initialState = void 0; // istanbul ignore next\n\n    if (process.env.NODE_ENV !== 'production' && !context.reactFinalForm) {\n      console.error('Warning: Field must be used inside of a ReactFinalForm component');\n    }\n\n    if (_this.context.reactFinalForm) {\n      // avoid error, warning will alert developer to their mistake\n      _this.subscribe(props, function (state) {\n        if (initialState) {\n          _this.notify(state);\n        } else {\n          initialState = state;\n        }\n      });\n    }\n\n    _this.state = {\n      state: initialState\n    };\n    return _this;\n  }\n\n  Field.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _props = this.props,\n        name = _props.name,\n        subscription = _props.subscription;\n\n    if (prevProps.name !== name || diffSubscription(prevProps.subscription, subscription, fieldSubscriptionItems)) {\n      if (this.context.reactFinalForm) {\n        // avoid error, warning will alert developer to their mistake\n        this.unsubscribe();\n        this.subscribe(this.props, this.notify);\n      }\n    }\n  };\n\n  Field.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.unsubscribe();\n  };\n\n  Field.prototype.render = function render() {\n    var _props2 = this.props,\n        allowNull = _props2.allowNull,\n        component = _props2.component,\n        children = _props2.children,\n        format = _props2.format,\n        formatOnBlur = _props2.formatOnBlur,\n        parse = _props2.parse,\n        isEqual = _props2.isEqual,\n        name = _props2.name,\n        subscription = _props2.subscription,\n        validate = _props2.validate,\n        validateFields = _props2.validateFields,\n        _value = _props2.value,\n        rest = objectWithoutProperties(_props2, ['allowNull', 'component', 'children', 'format', 'formatOnBlur', 'parse', 'isEqual', 'name', 'subscription', 'validate', 'validateFields', 'value']);\n\n    var _ref = this.state.state || {},\n        blur = _ref.blur,\n        change = _ref.change,\n        focus = _ref.focus,\n        value = _ref.value,\n        ignoreName = _ref.name,\n        otherState = objectWithoutProperties(_ref, ['blur', 'change', 'focus', 'value', 'name']);\n\n    var meta = {\n      // this is to appease the Flow gods\n      active: otherState.active,\n      data: otherState.data,\n      dirty: otherState.dirty,\n      dirtySinceLastSubmit: otherState.dirtySinceLastSubmit,\n      error: otherState.error,\n      initial: otherState.initial,\n      invalid: otherState.invalid,\n      pristine: otherState.pristine,\n      submitError: otherState.submitError,\n      submitFailed: otherState.submitFailed,\n      submitSucceeded: otherState.submitSucceeded,\n      touched: otherState.touched,\n      valid: otherState.valid,\n      visited: otherState.visited\n    };\n\n    if (formatOnBlur) {\n      value = Field.defaultProps.format(value, name);\n    } else if (format) {\n      value = format(value, name);\n    }\n\n    if (value === null && !allowNull) {\n      value = '';\n    }\n\n    var input = _extends({\n      name: name,\n      value: value\n    }, this.handlers);\n\n    if (rest.type === 'checkbox') {\n      if (_value === undefined) {\n        input.checked = !!value;\n      } else {\n        input.checked = !!(Array.isArray(value) && ~value.indexOf(_value));\n        input.value = _value;\n      }\n    } else if (rest.type === 'radio') {\n      input.checked = value === _value;\n      input.value = _value;\n    } else if (component === 'select' && rest.multiple) {\n      input.value = input.value || [];\n    }\n\n    if (typeof children === 'function') {\n      return children(_extends({\n        input: input,\n        meta: meta\n      }, rest));\n    }\n\n    if (typeof component === 'string') {\n      // ignore meta, combine input with any other props\n      return createElement(component, _extends({}, input, {\n        children: children\n      }, rest));\n    }\n\n    var renderProps = {\n      input: input,\n      meta: meta // assign to force Flow check\n\n    };\n    return renderComponent(_extends({}, renderProps, {\n      children: children,\n      component: component\n    }, rest), 'Field(' + name + ')');\n  };\n\n  return Field;\n}(Component);\n\nField.contextTypes = {\n  reactFinalForm: PropTypes.object\n};\nField.defaultProps = {\n  format: function format(value, name) {\n    return value === undefined ? '' : value;\n  },\n  parse: function parse(value, name) {\n    return value === '' ? undefined : value;\n  }\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.subscribe = function (_ref2, listener) {\n    var isEqual = _ref2.isEqual,\n        name = _ref2.name,\n        subscription = _ref2.subscription,\n        validateFields = _ref2.validateFields;\n    _this2.unsubscribe = _this2.context.reactFinalForm.registerField(name, listener, subscription || all, {\n      isEqual: isEqual,\n      getValidator: function getValidator() {\n        return _this2.props.validate;\n      },\n      validateFields: validateFields\n    });\n  };\n\n  this.notify = function (state) {\n    return _this2.setState({\n      state: state\n    });\n  };\n\n  this.handlers = {\n    onBlur: function onBlur(event) {\n      var state = _this2.state.state; // this is to appease the Flow gods\n      // istanbul ignore next\n\n      if (state) {\n        var _props3 = _this2.props,\n            format = _props3.format,\n            formatOnBlur = _props3.formatOnBlur;\n        state.blur();\n\n        if (format && formatOnBlur) {\n          state.change(format(state.value, state.name));\n        }\n      }\n    },\n    onChange: function onChange(event) {\n      var _props4 = _this2.props,\n          parse = _props4.parse,\n          _value = _props4.value; // istanbul ignore next\n\n      if (process.env.NODE_ENV !== 'production' && event && event.target) {\n        var targetType = event.target.type;\n        var props = _this2.props;\n        var unknown = ~['checkbox', 'radio', 'select-multiple'].indexOf(targetType) && !props.type;\n        var type = targetType === 'select-multiple' ? 'select' : targetType;\n\n        var _ref3 = targetType === 'select-multiple' ? _this2.state.state || {} : props,\n            _value2 = _ref3.value;\n\n        if (unknown) {\n          console.error('Warning: You must pass `type=\"' + type + '\"` prop to your Field(' + props.name + ') component.\\n' + ('Without it we don\\'t know how to unpack your `value` prop - ' + (Array.isArray(_value2) ? '[' + _value2 + ']' : '\"' + _value2 + '\"') + '.'));\n        }\n      }\n\n      var value = event && event.target ? getValue(event, _this2.state.state && _this2.state.state.value, _value, isReactNative) : event;\n      _this2.state.state && _this2.state.state.change(parse ? parse(value, _this2.props.name) : value);\n    },\n    onFocus: function onFocus(event) {\n      _this2.state.state && _this2.state.state.focus();\n    }\n  };\n}; //      \n\n\nvar shallowEqual = function shallowEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) !== 'object' || !a || (typeof b === 'undefined' ? 'undefined' : _typeof(b)) !== 'object' || !b) {\n    return false;\n  }\n\n  var keysA = Object.keys(a);\n  var keysB = Object.keys(b);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b);\n\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key) || a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}; //      \n\n\nvar isSyntheticEvent = function isSyntheticEvent(candidate) {\n  return !!(candidate && typeof candidate.stopPropagation === 'function');\n}; //      \n\n\nvar version$1 = '3.6.0';\nvar versions = {\n  'final-form': version,\n  'react-final-form': version$1\n};\nvar all$1 = formSubscriptionItems.reduce(function (result, key) {\n  result[key] = true;\n  return result;\n}, {});\n\nvar ReactFinalForm = function (_React$Component) {\n  inherits(ReactFinalForm, _React$Component);\n\n  function ReactFinalForm(props) {\n    classCallCheck(this, ReactFinalForm);\n\n    var _this = possibleConstructorReturn(this, _React$Component.call(this, props));\n\n    _this.notify = function (state) {\n      if (_this.mounted) {\n        _this.setState({\n          state: state\n        });\n      }\n\n      _this.mounted = true;\n    };\n\n    _this.handleSubmit = function (event) {\n      if (event) {\n        // sometimes not true, e.g. React Native\n        if (typeof event.preventDefault === 'function') {\n          event.preventDefault();\n        }\n\n        if (typeof event.stopPropagation === 'function') {\n          // prevent any outer forms from receiving the event too\n          event.stopPropagation();\n        }\n      }\n\n      return _this.form.submit();\n    };\n\n    var children = props.children,\n        component = props.component,\n        render = props.render,\n        subscription = props.subscription,\n        decorators = props.decorators,\n        rest = objectWithoutProperties(props, ['children', 'component', 'render', 'subscription', 'decorators']);\n    var config = rest;\n    _this.mounted = false;\n\n    try {\n      _this.form = createForm(config);\n    } catch (e) {\n      // istanbul ignore next\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Warning: ' + e.message);\n      }\n    }\n\n    _this.unsubscriptions = [];\n\n    if (_this.form) {\n      // set initial state\n      var initialState = {};\n\n      _this.form.subscribe(function (state) {\n        initialState = state;\n      }, subscription || all$1)();\n\n      _this.state = {\n        state: initialState\n      };\n    }\n\n    if (decorators) {\n      decorators.forEach(function (decorator) {\n        _this.unsubscriptions.push(decorator(_this.form));\n      });\n    }\n\n    return _this;\n  }\n\n  ReactFinalForm.prototype.getChildContext = function getChildContext() {\n    return {\n      reactFinalForm: this.form\n    };\n  };\n\n  ReactFinalForm.prototype.componentWillMount = function componentWillMount() {\n    if (this.form) {\n      this.form.pauseValidation();\n    }\n  };\n\n  ReactFinalForm.prototype.componentDidMount = function componentDidMount() {\n    if (this.form) {\n      this.unsubscriptions.push(this.form.subscribe(this.notify, this.props.subscription || all$1));\n      this.form.resumeValidation();\n    }\n  };\n\n  ReactFinalForm.prototype.componentWillUpdate = function componentWillUpdate() {\n    // istanbul ignore next\n    if (this.form) {\n      this.resumeValidation = !this.form.isValidationPaused();\n      this.form.pauseValidation();\n    }\n  };\n\n  ReactFinalForm.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this; // istanbul ignore next\n\n\n    if (this.form && this.resumeValidation) {\n      this.form.resumeValidation();\n    }\n\n    if (this.props.initialValues && !shallowEqual(prevProps.initialValues, this.props.initialValues)) {\n      this.form.initialize(this.props.initialValues);\n    }\n\n    configOptions.forEach(function (key) {\n      if (key === 'initialValues' || prevProps[key] === _this2.props[key]) {\n        return;\n      }\n\n      _this2.form.setConfig(key, _this2.props[key]);\n    }); // istanbul ignore next\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!shallowEqual(prevProps.decorators, this.props.decorators)) {\n        console.error('Warning: Form decorators should not change from one render to the next as new values will be ignored');\n      }\n\n      if (!shallowEqual(prevProps.subscription, this.props.subscription)) {\n        console.error('Warning: Form subscription should not change from one render to the next as new values will be ignored');\n      }\n    }\n  };\n\n  ReactFinalForm.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.unsubscriptions.forEach(function (unsubscribe) {\n      return unsubscribe();\n    });\n  };\n\n  ReactFinalForm.prototype.render = function render() {\n    var _this3 = this; // remove config props\n\n\n    var _props = this.props,\n        debug = _props.debug,\n        initialValues = _props.initialValues,\n        mutators = _props.mutators,\n        onSubmit = _props.onSubmit,\n        subscription = _props.subscription,\n        validate = _props.validate,\n        validateOnBlur = _props.validateOnBlur,\n        props = objectWithoutProperties(_props, ['debug', 'initialValues', 'mutators', 'onSubmit', 'subscription', 'validate', 'validateOnBlur']);\n\n    var renderProps = _extends({}, this.state ? this.state.state : {}, {\n      batch: this.form && function (fn) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.batch() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.batch() instead. Check your ReactFinalForm render prop.');\n        }\n\n        return _this3.form.batch(fn);\n      },\n      blur: this.form && function (name) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.blur() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.blur() instead. Check your ReactFinalForm render prop.');\n        }\n\n        return _this3.form.blur(name);\n      },\n      change: this.form && function (name, value) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.change() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.change() instead. Check your ReactFinalForm render prop.');\n        }\n\n        return _this3.form.change(name, value);\n      },\n      focus: this.form && function (name) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.focus() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.focus() instead. Check your ReactFinalForm render prop.');\n        }\n\n        return _this3.form.focus(name);\n      },\n      form: _extends({}, this.form, {\n        reset: function reset(eventOrValues) {\n          if (isSyntheticEvent(eventOrValues)) {\n            // it's a React SyntheticEvent, call reset with no arguments\n            _this3.form.reset();\n          } else {\n            _this3.form.reset(eventOrValues);\n          }\n        }\n      }),\n      handleSubmit: this.handleSubmit,\n      initialize: this.form && function (values) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.initialize() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.initialize() instead. Check your ReactFinalForm render prop.');\n        }\n\n        return _this3.form.initialize(values);\n      },\n      mutators: this.form && Object.keys(this.form.mutators).reduce(function (result, key) {\n        result[key] = function () {\n          var _form$mutators;\n\n          (_form$mutators = _this3.form.mutators)[key].apply(_form$mutators, arguments); // istanbul ignore next\n\n\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('Warning: As of React Final Form v3.3.0, props.mutators is deprecated and will be removed in the next major version of React Final Form. Use: props.form.mutators instead. Check your ReactFinalForm render prop.');\n          }\n        };\n\n        return result;\n      }, {}),\n      reset: this.form && function (values) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.reset() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.reset() instead. Check your ReactFinalForm render prop.');\n        }\n\n        return _this3.form.reset(values);\n      }\n    });\n\n    return renderComponent(_extends({}, props, renderProps, {\n      __versions: versions\n    }), 'ReactFinalForm');\n  };\n\n  return ReactFinalForm;\n}(Component);\n\nReactFinalForm.childContextTypes = {\n  reactFinalForm: PropTypes.object\n}; //      \n\nvar FormSpy = function (_React$Component) {\n  inherits(FormSpy, _React$Component);\n\n  function FormSpy(props, context) {\n    classCallCheck(this, FormSpy);\n\n    var _this = possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _this.subscribe = function (_ref, listener) {\n      var subscription = _ref.subscription;\n      _this.unsubscribe = _this.context.reactFinalForm.subscribe(listener, subscription || all$1);\n    };\n\n    _this.notify = function (state) {\n      _this.setState({\n        state: state\n      });\n\n      if (_this.props.onChange) {\n        _this.props.onChange(state);\n      }\n    };\n\n    var initialState = void 0; // istanbul ignore next\n\n    if (process.env.NODE_ENV !== 'production' && !context.reactFinalForm) {\n      console.error('Warning: FormSpy must be used inside of a ReactFinalForm component');\n    }\n\n    if (_this.context.reactFinalForm) {\n      // avoid error, warning will alert developer to their mistake\n      _this.subscribe(props, function (state) {\n        if (initialState) {\n          _this.notify(state);\n        } else {\n          initialState = state;\n\n          if (props.onChange) {\n            props.onChange(state);\n          }\n        }\n      });\n    }\n\n    if (initialState) {\n      _this.state = {\n        state: initialState\n      };\n    }\n\n    return _this;\n  }\n\n  FormSpy.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var subscription = this.props.subscription;\n\n    if (diffSubscription(prevProps.subscription, subscription, formSubscriptionItems)) {\n      if (this.context.reactFinalForm) {\n        // avoid error, warning will alert developer to their mistake\n        this.unsubscribe();\n        this.subscribe(this.props, this.notify);\n      }\n    }\n  };\n\n  FormSpy.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.unsubscribe();\n  };\n\n  FormSpy.prototype.render = function render() {\n    var _props = this.props,\n        onChange = _props.onChange,\n        subscription = _props.subscription,\n        rest = objectWithoutProperties(_props, ['onChange', 'subscription']);\n    var reactFinalForm = this.context.reactFinalForm;\n    var renderProps = {\n      batch: reactFinalForm && function (fn) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.batch() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.batch() instead. Check your FormSpy render prop.');\n        }\n\n        return reactFinalForm.batch(fn);\n      },\n      blur: reactFinalForm && function (name) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.blur() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.blur() instead. Check your FormSpy render prop.');\n        }\n\n        return reactFinalForm.blur(name);\n      },\n      change: reactFinalForm && function (name, value) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.change() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.change() instead. Check your FormSpy render prop.');\n        }\n\n        return reactFinalForm.change(name, value);\n      },\n      focus: reactFinalForm && function (name) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.focus() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.focus() instead. Check your FormSpy render prop.');\n        }\n\n        return reactFinalForm.focus(name);\n      },\n      form: _extends({}, reactFinalForm, {\n        reset: function reset(eventOrValues) {\n          if (isSyntheticEvent(eventOrValues)) {\n            // it's a React SyntheticEvent, call reset with no arguments\n            reactFinalForm.reset();\n          } else {\n            reactFinalForm.reset(eventOrValues);\n          }\n        }\n      }),\n      initialize: reactFinalForm && function (values) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.initialize() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.initialize() instead. Check your FormSpy render prop.');\n        }\n\n        return reactFinalForm.initialize(values);\n      },\n      mutators: reactFinalForm && Object.keys(reactFinalForm.mutators).reduce(function (result, key) {\n        result[key] = function () {\n          var _reactFinalForm$mutat;\n\n          (_reactFinalForm$mutat = reactFinalForm.mutators)[key].apply(_reactFinalForm$mutat, arguments); // istanbul ignore next\n\n\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('Warning: As of React Final Form v3.3.0, props.mutators is deprecated and will be removed in the next major version of React Final Form. Use: props.form.mutators instead. Check your FormSpy render prop.');\n          }\n        };\n\n        return result;\n      }, {}),\n      reset: reactFinalForm && function (values) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error('Warning: As of React Final Form v3.3.0, props.reset() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.reset() instead. Check your FormSpy render prop.');\n        }\n\n        return reactFinalForm.reset(values);\n      }\n    };\n    return onChange ? null : renderComponent(_extends({}, rest, this.state ? this.state.state : {}, renderProps), 'FormSpy');\n  };\n\n  return FormSpy;\n}(Component);\n\nFormSpy.contextTypes = {\n  reactFinalForm: PropTypes.object\n}; //\n\nexport { Field, ReactFinalForm as Form, version$1 as version, FormSpy };","map":null,"metadata":{},"sourceType":"module"}