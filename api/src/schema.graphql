type User {
  id: ID!
  username: String!
  firstName: String
  lastName: String
  age: Int
  bio: String
  sex: String
  location: String!
  phone: String!
  email: String!
  password: String!
  # verified: Boolean!
  # vip: Boolean!
  reviews_written: [Review] @relation(name: "WROTE", direction: "OUT")
  reviews_received: [Review] @relation(name: "REVIEWS", direction: "IN")

  avgStars: Float
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
    )
  numReviews: Int
    @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
}

type Review {
  id: ID!
  stars: Int
  title: String
  text: String
  dateOfReview: Date
  #score: Int
  reviewWriter: User @relation(name: "WROTE", direction: "IN")
  reviewReceiver: User @relation(name: "REVIEWS", direction: "OUT")
}

type Query {
  usersBySubstring(substring: String): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u"
    )
}

# type Query {
#   reviews:[Review]
#   reviewById(id:ID!):Review
# }

